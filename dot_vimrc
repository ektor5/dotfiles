" An example for a vimrc file.
"
" Maintainer:	Bram Moolenaar <Bram@vim.org>
" Last change:	2011 Apr 15
"
" To use it, copy it to
"     for Unix and OS/2:  ~/.vimrc
"	      for Amiga:  s:.vimrc
"  for MS-DOS and Win32:  $VIM\_vimrc
"	    for OpenVMS:  sys$login:.vimrc

" When started as "evim", evim.vim will already have done these settings.
if v:progname =~? "evim"
  finish
endif

" Use Vim settings, rather than Vi settings (much better!).
" This must be first, because it changes other options as a side effect.
set nocompatible

" allow backspacing over everything in insert mode
set backspace=indent,eol,start

if has("vms")
  set nobackup		" do not keep a backup file, use versions instead
else
  set backup		" keep a backup file
endif
set history=50		" keep 50 lines of command line history
set ruler		" show the cursor position all the time
set showcmd		" display incomplete commands
set incsearch		" do incremental searching

" For Win32 GUI: remove 't' flag from 'guioptions': no tearoff menu entries
" let &guioptions = substitute(&guioptions, "t", "", "g")

" Don't use Ex mode, use Q for formatting
map Q gq

" CTRL-U in insert mode deletes a lot.  Use CTRL-G u to first break undo,
" so that you can undo CTRL-U after inserting a line break.
inoremap <C-U> <C-G>u<C-U>

" In many terminal emulators the mouse works just fine, thus enable it.
"if has('mouse')
"  set mouse=a
"endif

" Switch syntax highlighting on, when the terminal has colors
" Also switch on highlighting the last used search pattern.
if &t_Co > 2 || has("gui_running")
  syntax on
  set hlsearch
endif

" Only do this part when compiled with support for autocommands.
if has("autocmd")

  " Enable file type detection.
  " Use the default filetype settings, so that mail gets 'tw' set to 72,
  " 'cindent' is on in C files, etc.
  " Also load indent files, to automatically do language-dependent indenting.
  filetype plugin indent on

  " Put these in an autocmd group, so that we can delete them easily.
  augroup vimrcEx
  au!

  " For all text files set 'textwidth' to 78 characters.
  autocmd FileType text setlocal textwidth=78

  " When editing a file, always jump to the last known cursor position.
  " Don't do it when the position is invalid or when inside an event handler
  " (happens when dropping a file on gvim).
  " Also don't do it when the mark is in the first line, that is the default
  " position when opening a file.
  autocmd BufReadPost *
    \ if line("'\"") > 1 && line("'\"") <= line("$") |
    \   exe "normal! g`\"" |
    \ endif

  augroup END

else

  set autoindent		" always set autoindenting on

endif " has("autocmd")
  
" kernel conf
set tabstop=8       " number of visual spaces per TAB
set shiftwidth=8
set softtabstop=8   " number of spaces in tab when editing
set noexpandtab     " tabs aren't spaces
set lazyredraw      " redraw only when we need to.
set showmatch       " highlight matching [{()}]

set path=.,include,/usr/include

syn on se title

  " Convenient command to see the difference between the current buffer and the
" file it was loaded from, thus the changes you made.
" Only define it when not defined already.
if !exists(":DiffOrig")
  command DiffOrig vert new | set bt=nofile | r ++edit # | 0d_ | diffthis
		  \ | wincmd p | diffthis
endif

" Konami code
inoremap <up> <nop>
vnoremap <up> <nop>

inoremap <down> <nop>
vnoremap <down> <nop>

inoremap <left> <nop>
vnoremap <right> <nop>

vnoremap <left> <nop>
inoremap <right> <nop>

" visual autocomplete for command menu
set wildmenu

" colorscheme
colorscheme badwolf

" UI Config
set number              " show line numbers
set cursorline          " highlight current line

"
" ek5: Remapping
"

" leader is comma
let mapleader=","       

" turn off search highlight
nnoremap <leader><space> :nohlsearch<CR>

" exit insert mode easily pressing j and k consecutively 
inoremap jk <esc>

" toggle gundo
"nnoremap <leader>u :GundoToggle<CR>

" Copy to X CLIPBOARD
map <leader>yy :w !xsel -i -b<CR>
map <leader>yp :w !xsel -i -p<CR>
map <leader>ys :w !xsel -i -s<CR>
" Paste from X CLIPBOARD
map <leader>pp :r !xsel -p<CR>
map <leader>ps :r !xsel -s<CR>
map <leader>pb :r !xsel -b<CR>

" powerline
let $PYTHONPATH='/usr/lib/python3.5/site-packages'
set noshowmode
set laststatus=2
let g:powerline_pycmd = "py3"
let g:airline_theme="hybridline"
let g:airline#extensions#tabline#enabled = 1
let g:airline_powerline_fonts = 1

" set guifont=Terminus\ 8


" tagbar
nmap <F8> :TagbarToggle<CR>

" NERDtree
nmap <F7> :NERDTreeToggle<CR>

" YouCompleteMe
let g:ycm_server_python_interpreter = '/usr/bin/python3'
let g:ycm_python_binary_path = '/usr/bin/python3'

let g:ycm_complete_in_comments_and_strings=1
let g:ycm_key_list_select_completion=['<C-n>', '<Down>']
let g:ycm_key_list_previous_completion=['<C-p>', '<Up>']
let g:ycm_autoclose_preview_window_after_completion = 1

let g:ycm_global_ycm_extra_conf='~/.ycm_extra_conf.py'

" Syntastic
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0

" Org
let g:org_agenda_files=['~/org/*.org']

" C.Vim
let g:C_CFlags = '-Wall -g -O0 -c -I/lib/modules/4.10.6-1-ARCH/build/include'

" Fugitive
nmap <C-g> :Gstatus<CR>
nmap <leader>gs :Gstatus<CR>
nmap <leader>gd :Gdiff<CR>
nmap <leader>gb :Gblame<CR>

" pathogen
execute pathogen#infect()
